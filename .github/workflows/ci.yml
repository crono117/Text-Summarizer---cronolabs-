name: SummaSaaS CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality Checks
  lint-and-format:
    name: Code Quality (Black, isort, Flake8)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install black isort flake8 pylint mypy
          pip install -r requirements/dev.txt

      - name: Run Black (code formatting check)
        run: black --check src/ tests/

      - name: Run isort (import sorting check)
        run: isort --check-only src/ tests/

      - name: Run Flake8 (linting)
        run: flake8 src/ tests/ --max-line-length=120 --exclude=migrations

      - name: Run Pylint
        run: pylint src/ --disable=C0111,R0903 --max-line-length=120 || true

  # Job 2: Security Checks
  security-scan:
    name: Security Scan (Safety, Bandit)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          pip install safety bandit

      - name: Run Safety (dependency vulnerability check)
        run: safety check --json || true

      - name: Run Bandit (security linting)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # Job 3: Unit & Integration Tests
  test-backend:
    name: Backend Tests (Pytest)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: summasaas_test
          POSTGRES_USER: summasaas_test
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run Django checks
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python manage.py check

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python manage.py migrate --noinput

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/integration/ -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-html
          path: htmlcov/

  # Job 4: E2E Playwright Visual Tests
  test-playwright:
    name: Visual QA Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: summasaas_test
          POSTGRES_USER: summasaas_test
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Install Playwright browsers
        run: |
          playwright install --with-deps chromium firefox webkit

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python manage.py migrate --noinput

      - name: Start Django dev server
        env:
          DATABASE_URL: postgresql://summasaas_test:test_password@localhost:5432/summasaas_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          python manage.py runserver 0.0.0.0:8000 &
          sleep 5

      - name: Run Playwright tests
        env:
          TEST_BASE_URL: http://localhost:8000
        run: |
          pytest tests/e2e_playwright/ -v --browser chromium --browser firefox --browser webkit

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-screenshots
          path: project_state/artifacts/playwright/

  # Job 5: Build Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: summasaas:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 6: Deployment Readiness
  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-backend, test-playwright, build-docker]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify all required files
        run: |
          test -f docker-compose.yml
          test -f Dockerfile
          test -f .env.example
          test -f requirements/prod.txt

      - name: Summary
        run: |
          echo "âœ… All CI checks passed!"
          echo "âœ… Backend tests passed"
          echo "âœ… Visual QA tests passed"
          echo "âœ… Docker image built successfully"
          echo "ðŸš€ Ready for deployment"
